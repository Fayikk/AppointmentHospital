@page "/login"
@using AppointmentHospital.Shared.Model;

@inject IAuthService _authService
@inject ILocalStorageService _localStorage
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager
@inject IJSRuntime _js

<PageTitle>Login</PageTitle>
<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="mb-3">
        <label for="email">EMail</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"></InputText>
        <ValidationMessage For="@(()=>user.Email)" ></ValidationMessage>
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" type="password" class="form-control"></InputText>
        <ValidationMessage For="@(()=>user.Password)"></ValidationMessage>
    </div>
    <ValidationSummary></ValidationSummary>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>
<div class="text-danger">
    <span>@message</span>
</div>


@code {
    UserLogin user = new UserLogin();
    private string message = string.Empty;
    private async Task HandleLogin()
    {
        var result = await _authService.Login(user);
        if (result.Success==true)
        {
            message = result.Message;
            await _localStorage.SetItemAsync("authToken", result.Data);
            await _authenticationStateProvider.GetAuthenticationStateAsync();
            _navigationManager.NavigateTo("");
            await _js.InvokeVoidAsync("ShowToastr", "success", message);

        }
        else
        {
            message = result.Message;
            await _js.InvokeVoidAsync("ShowToastr", "error", message);
        }
    }

}
